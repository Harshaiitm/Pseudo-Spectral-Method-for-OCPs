function [R1_I,V1_I,qn1] = lat_long_elev_azi_vec1(M,problem) 

Re = problem.Re;
nodes = problem.nodes;
D = problem.D;

t0 = 0;
stage_time = 160;

% Earth's rotational velocity in the inertial frame
Omega_z = 2 * pi / (24 * 60 * 60);  % Sidereal Rotation Rate (rad/s)
Omega_x = 0;
Omega_y = 0;
Omega_I = [Omega_x; Omega_y; Omega_z];

load time_alt_lat_long.csv
time = time_alt_lat_long(:,1);
alt = time_alt_lat_long(:,2)*1000;
lat = time_alt_lat_long(:,3);
long = time_alt_lat_long(:,4);

t_1 = ((stage_time-t0)/2).*nodes+(stage_time+t0)/2;

Altitude0_1 = interp1(time, alt, t_1, 'pchip');
latitude_1 = deg2rad(interp1(alt, lat, Altitude0_1, 'pchip'));
longitude_1 = deg2rad(interp1(alt, long, Altitude0_1, 'pchip'));

theta_1 = pi/2 - latitude_1;
phi_1 = longitude_1;

% Radial Distance from Earth's center
R1_B = (Altitude0_1 + Re);

% Cartesian Coordinates
Rx1_I = R1_B .* sin(theta_1) .* cos(phi_1);
Ry1_I = R1_B .* sin(theta_1) .* sin(phi_1);
Rz1_I = R1_B .* cos(theta_1);

R1_I = [Rx1_I'; Ry1_I'; Rz1_I'];
R1_I_mag = sqrt(Rx1_I.^2 + Ry1_I.^2 + Rz1_I.^2);

Vx1_I = (2/160)*(D*Rx1_I);
Vy1_I = (2/160)*(D*Ry1_I);
Vz1_I = (2/160)*(D*Rz1_I);

V1_I = [Vx1_I';Vy1_I'; Vz1_I'];
V1_I_mag = sqrt(Vx1_I.^2 + Vy1_I.^2 + Vz1_I.^2);

% Quaternion Calculations
q1 = zeros(1, M);
q2 = zeros(1, M);
q3 = zeros(1, M);
q4 = zeros(1, M);

for i = 1:M
    V_I1 = [Vx1_I(i); Vy1_I(i); Vz1_I(i)];
    V_B1 = [V1_I_mag(i); 0; 0];
    r(i, :) = vrrotvec(V_B1, V_I1);
    qn1 = (axang2quat(r(i, :)))';

    q1(i) = qn1(1);
    q2(i) = qn1(2);
    q3(i) = qn1(3);
    q4(i) = qn1(4);
end

qn1 = [q1;q2;q3;q4];
test = sqrt(q1.^2+q2.^2+q3.^2+q4.^2);

end





